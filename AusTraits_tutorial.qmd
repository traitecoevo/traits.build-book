# AusTraits tutorial

## Introduction

With more than 1.8 million data records, AusTraits is Australia's [largest plant trait database](austraits_database.html#plant_database), created using the [`{traits.build}` R package](https://github.com/traitecoevo/traits.build)

This tutorial introduces:

-   [the database structure](#database_structure)

-   [`{austraits}` R package functions](#austraits_functions)

-   additional [examples of analyses](#sample_analyses) using the database

To access more information about `traits.build` see [`traits.build-book`](https://traitecoevo.github.io/traits.build-book/)  


Or you can visit the Github repositories for individual packages/data repos:

-   the database structure, [`traits.build`](https://github.com/traitecoevo/traits.build)

-   the database contents, [`austraits.build`](https://github.com/traitecoevo/austraits.build)

-   an R package for exploring and wrangling the data, [`austraits`](https://github.com/traitecoevo/austraits)

## Download AusTraits data

Before you begin, download and source essential packages and functions.


```{r, eval = TRUE, message = FALSE}
library(readr)
library(tidyr)
library(dplyr)
library(stringr)

#remotes::install_github("traitecoevo/austraits", quick=TRUE)

library(austraits)    # functions for exploring a traits.build database, available at Github repo
library(traits.build) # additional functions for exploring a traits.build database, available at Github repo

source("data/extra_functions.R")
```

Then download (or build) the latest AusTraits data, by one of the methods described [here](austraits_database.html#access_data).

This tutorial uses the most recent AusTraits release, version `r austraits::get_versions()[["version"]][1]`

```{r, eval = TRUE}
most_recent <- austraits::get_versions()|> dplyr::pull("doi") |> dplyr::first()

most_recent

austraits <- austraits::load_austraits(doi = most_recent)
```

## A first look at data {#exploring}

If you're not familiar with AusTraits, you may want to begin by exploring the breadth and depth of data within the database. The database can be explored by trait name, species, or genus using either [austraits functions](#austraits_functions) or dplyr functions.

*How many taxa have `leaf_N_per_dry_mass` data in AusTraits?*

```{r, eval = TRUE}
austraits$traits %>% 
  dplyr::filter(trait_name == "leaf_N_per_dry_mass") %>%
  dplyr::distinct(taxon_name) %>% nrow()
```

*How are these data distributed across datasets?*

```{r, eval = TRUE}
austraits::plot_trait_distribution_beeswarm(austraits, "leaf_N_per_dry_mass", y_axis_category = "dataset_id")
```

*How much data exist for other nitrogen traits?*

```{r, eval = TRUE}
austraits::lookup_trait(austraits, "_N_") -> N_traits

austraits$traits %>% 
  dplyr::filter(trait_name %in% N_traits) %>% 
  dplyr::distinct(taxon_name, trait_name) %>% 
  dplyr::group_by(trait_name) %>% 
    dplyr::mutate(n_taxa = length(trait_name)) %>% 
  dplyr::ungroup() %>% 
  dplyr::distinct(trait_name, n_taxa)
```

*How many "hydraulic" traits are in AusTraits? How much data exist for these traits?*

```{r, eval = TRUE}
austraits::lookup_trait(austraits, "hydraulic") -> hydraulic_traits

austraits$traits %>% 
  dplyr::filter(trait_name %in% hydraulic_traits) %>% 
  dplyr::distinct(taxon_name, trait_name) %>% 
  dplyr::group_by(trait_name) %>% 
    dplyr::mutate(n_taxa = length(trait_name)) %>% 
  dplyr::ungroup() %>% 
  dplyr::distinct(trait_name, n_taxa)
```

*Where have trait data for Acacia aneura been collected?*

```{r, eval = TRUE, warning = FALSE, message = FALSE}
data <-
  austraits %>%
     austraits::extract_taxa(taxon_name = "Acacia aneura") %>%
     austraits::join_locations()

data$traits %>% austraits::plot_locations("taxon_name") # 1 taxon, so 1 plot
```

*Where have data for Hibbertia species been collected?*

```{r, eval = TRUE, warning = FALSE,  message = FALSE}
data <-
  austraits %>%
     austraits::extract_taxa(genus = "Hibbertia") %>%
     austraits::join_locations() %>%
     austraits::join_taxonomy()

data$traits %>% austraits::plot_locations("genus")
```

## The database structure {#database_structure}

The `{traits.build}` R package is the workflow that builds AusTraits from its component datasets.

The database is output as a collection of relational tables, described in detail [here](database_structure.html).

The data object `austraits` includes both the relational data tables and additional tables documenting database metadata and the traits dictionary referenced for trait concepts.

```{r, eval = TRUE}
names(austraits)
```

### Traits table

The core AusTraits table is the traits table. It is in "long" format, with each row documenting a single trait measurement.

```{r, eval = TRUE}
austraits$traits %>% dplyr::slice(1:20)
```

The columns include:

-   core columns 
    -   dataset_id 
    -   taxon_name 
    -   trait_name 
    -   value (trait value) 
-   entity metadata
    -   entity_type\
    -   life_stage
-   value metadata
    -   value_type\
    -   unit\
    -   basis_of_value\
    -   replicate\
    -   basis_of_record\
-   additional metadata
    -   collection_date
    -   measurement_remarks
-   identifiers for specific observations, individuals, etc.
    -   observation_id\
    -   individual_id\
    -   population_id\
    -   repeat_measurements_id\
-   identifiers that provide links to ancillary tables with additional metadata
    -   location_id\
    -   treatment_context_id\
    -   plot_context_id\
    -   entity_context_id\
    -   temporal_context_id\
    -   method_context_id\
    -   method_id\
    -   source_id

### Ancillary data tables

The remaining metadata accompanying each trait record is recorded across multiple relational tables.

These include: 

-   austraits\$locations 
-   austraits\$contexts 
-   austraits\$methods 
-   austraits\$taxa 
-   austraits\$taxonomic_updates 
-   austraits\$contributors 

Like the core `traits` table, each is in 'long' format.

The tables `locations`, `contexts`, `methods` and `taxa` include metadata that links seamlessly to individual rows within `traits`.

As such, you can use the various `{dplyr}` join functions to join together the relational tables into a single (much) wider table. Some `{austraits}` package functions also join key columns to the traits table.

| table             | metadata in table                                                                                                                               | columns that link to austraits\$traits                                                                                                                         |
|------------------|--------------------------|----------------------------|
| locations         | location name, location properties, latitude, longitude                                                                                         | dataset_id, location_id                                                                                                                                        |
| contexts          | context name, context category (method context, temporal, entity context, plot, treatment), context property                                    | dataset_id, link_id (identifier to link to: method_context_id, temporal_id, entity_context_id, plot_id, treatment_id), link_vals (identifier value to link to) |
| methods           | dataset description, dataset sampling strategy, trait collection method, data collectors, data curators, dataset citation, source_id & citation | dataset_id, trait_name, method_id                                                                                                                              |
| taxa              | genus, family, scientific name, APC/APNI taxon concept/taxon name identifiers                                                                   | taxon_name                                                                                                                                                     |
| taxonomic_updates | original name (name submitted), aligned name (typos removed; standardised syntax), identifiers for aligned name                                 | dataset_id, taxon_name, original_name                                                                                                                          |
| contributors      | people who contributed data, including their ORCIDs, affiliations, roles                                                                        | dataset_id                                                                                                                                                     |

## Exploring AusTraits

With `r nrow(austraits$traits)` rows of trait values in the main traits table, knowing how to explore the contents is essential.

The R package [`{austraits}`](https://github.com/traitecoevo/austraits) offers a collection of functions to explore and wrangle AusTraits data - or indeed any data using the traits.build format.

Function categories include:

-   [**summarise and lookup functions**](#summarise_functions): These functions offer summaries by taxon name or trait, summarising taxa per trait (or other variable), datasets per trait, and observations per trait.

-   [**filtering functions**](#filtering_functions): These functions begin with the word `extract` and filter all of the relational tables simultaneously.

-   [**join functions**](#join_functions): These functions allow columns from the relational tables to be joined to the core traits table.

-   [**pivot functions**](#pivot_functions): These functions allow the traits table to be pivoted between long and wide formats.

-   [**plotting functions**](#plotting_functions): These functions offer a means to rapidly visualise AusTraits data, either plotting collection locations on a map of Australia or plotting trait values by dataset.

### austraits.R function reference

Reference guide to: [austraits functions](https://traitecoevo.github.io/austraits/reference/index.html)

(There is also a standalone [austraits introduction](austraits_package.html), which repeats some of the same material covered here.)

### Summarising data: data coverage {#summarise_functions}

There are three functions for summarising AusTraits data:

-   **summarise_austraits()**\
-   **summarise_trait_means()**\
-   **lookup_trait()**

Use the function `summarise_austraits` to output summaries of total records, datasets with records, and taxa with records across `families`, `genera` or `traits`:

```{r, eval = TRUE}
austraits::summarise_austraits(austraits, "trait_name") %>% dplyr::slice(100:130)
austraits::summarise_austraits(austraits, var =  "family") %>% dplyr::slice(1:20)
austraits::summarise_austraits(austraits, var =  "genus") %>% dplyr::slice(1:20)
```

Since this function summarises the variable selected for **ALL** of AusTraits, you will want to first [filter](#filtering_functions) the data before summarising by "taxon_name" -- or even "trait_name".

Alternatively you can look up traits that contain a specific search term:

```{r, eval = TRUE}
austraits::lookup_trait(austraits, "leaf") %>% length()
austraits::lookup_trait(austraits, "leaf")[1:30]
austraits::lookup_trait(austraits, "_N_") # elemental contents use their symbol and are always in the middle of a trait name
austraits::lookup_trait(austraits, "photo")
```

If you'd like to summarise similar metrics for a subset of data, it is best to write your own code to filter, then summarise based on specific variable values.

For instance, to just look at info for nitrogen-related traits:

```{r, eval = TRUE}
austraits::lookup_trait(austraits, "_N_") -> N_traits

austraits$traits %>% 
  dplyr::filter(trait_name %in% N_traits) %>% 
  dplyr::distinct(taxon_name, trait_name) %>% 
  dplyr::group_by(trait_name) %>% 
  dplyr::mutate(n_taxa = length(trait_name)) %>% 
  dplyr::ungroup() %>% 
  dplyr::distinct(trait_name, n_taxa)
```

Or look at how many datasets have each trait:

```{r, eval = TRUE}
austraits::lookup_trait(austraits, "_N_") -> N_traits

austraits$traits %>% 
  dplyr::filter(trait_name %in% N_traits) %>% 
  dplyr::distinct(dataset_id, trait_name) %>%
  dplyr::group_by(trait_name) %>% 
  dplyr::mutate(n_dataset = length(trait_name)) %>% 
  dplyr::ungroup() %>% 
  dplyr::distinct(trait_name, n_dataset)
```

### Filtering data {#filtering_functions}

There are a trio of austraits.R functions to filter data by `trait_name`, `taxon_name` or `dataset_id`:

```{r, eval = TRUE}
leaf_mass_per_area_values <-
  austraits %>% 
     austraits::extract_trait(trait_names = c("leaf_mass_per_area"))

Westoby_2014_values <-
  austraits %>%
     austraits::extract_dataset("Westoby_2014")

Eucalyptus_values <-
  austraits %>%
     austraits::extract_taxa(genus = "Eucalyptus")

Banksia_serrata_values <-
  austraits %>%
     austraits::extract_taxa(genus = "Banksia serrata")
```

The advantage of the `{austraits}` package functions over `dplyr::filter()` is that they simultaneously subset both the core traits table and all the ancillary data tables.

However, there are many columns within the traits tables that you cannot (currently) filter by using `{austraits}` functions.

If you wish to also subset data based on fields such as `basis_of_record` or `life_stage` you need to use `dplyr::filter()`. This allows you to pipe together multiple filtering calls, but only filters the traits table.

```{r, eval = TRUE}
my_data <-
  austraits$traits %>%
    dplyr::filter(stringr::str_detect(taxon_name, "Eucalyptus")) %>%
    dplyr::filter(trait_name %in% c("leaf_mass_per_area", "leaf_length", "leaf_thickness")) %>%
    dplyr::filter(basis_of_record == "field")

my_data %>% nrow()
my_data %>% dplyr::slice(1:10)
```

### Joining relational tables {#join_functions}

For many research purposes you will want to join metadata from one of the relational tables to the core traits table. There are a series of `{austraits}` functions that facilitate this - or you can use `dplyr::left_join()` to join tables.

#### Joining locations

The locations table includes information on all location properties measured, including the actual location (latitude/longitude), climatic data, soil properties, fire history, vegetation history, and geologic history.

To just add location name, latitude, and longitude:

```{r, eval = TRUE}
traits_with_lat_long <- 
  austraits %>% austraits::join_locations()

traits_with_lat_long$traits %>%
  dplyr::select(dataset_id, taxon_name, trait_name, value, location_name, location_id, `latitude (deg)`, `longitude (deg)`) %>%
  dplyr::filter(!is.na(`latitude (deg)`)) %>%
  dplyr::slice(1:20) %>% View()
```

However, the `{austraits}` function `join_locations` only joins latitude and longitude data from the locations tables.

To join all location properties you need to use `tidyr::pivot_wider` and `dplyr::left_join`, using the code in steps (2) and (3) below.

Moreover, as there are currently `r length(unique(austraits$locations$location_property))` location properties, you will want to first filter the locations properties, to tailor your join request to the exact information relevant to your study.

1.  Select specific location properties to merge onto the traits table:

```{r, eval = TRUE}
austraits$locations %>% 
  dplyr::distinct(location_property)

locations <- 
  austraits$locations %>%
  dplyr::filter(location_property %in% c("latitude (deg)", "longitude (deg)", "description", "aridity index (MAP/PET)", "soil type", "fire history"))
```

2.  The data from the locations table must be pivoted into a wide-format table to join to the traits table.

```{r, eval = TRUE}
locations <- 
  locations %>%
  tidyr::pivot_wider(names_from = location_property, values_from = value)
```

3.  You can now now join this table of location properties onto the traits table.

```{r, eval = TRUE}
traits_with_locations <- 
  austraits$traits %>% 
  dplyr::left_join(locations, by = c("dataset_id", "location_id"))
```

#### Joining contexts

The context tables documents additional context properties/ancillary data may be useful for interpreting trait values. Context properties are divided into 5 categories, `treatment context`, `plot context`, `entity context`, `temporal context`, and `method context`.

| context category  | description                                                                                                                                                                                                      |
|---------------|---------------------------------------------------------|
| treatment context | Context property that is an experimental manipulation that might affect the trait values measured on an individual, population or species-level entity.                                                          |
| plot context      | Context property that is a feature of a plot (subset of a location) that might affect the trait values measured on an individual, population or species-level entity.                                            |
| entity context    | Context property that is information about an organismal entity (individual, population or taxon) that does not comprise a trait-centered observation but might affect the trait values measured on the entity.  |
| temporal context  | Context property that is a feature of a "point in time" that might affect the trait values measured on an individual, population or species-level entity.                                                        |
| method context    | Context property that records specific information about a measurement method that is modified between measurements.                                                                                    |

Joining the context table to the traits table is best done using the `{austraits}` function, as there are 5 identifiers in the traits table (`entity_context_id`, `method_context_id`, `temporal_context_id`, `plot_context_id` and `treatment_context_id`) that link to two columns in the contexts table (`link_vals` and `link_id`).

```{r, eval = TRUE}
traits_with_contexts <- 
  austraits %>% austraits::join_contexts()

traits_with_contexts$traits %>% 
  dplyr::select(-dplyr::all_of(c("temporal_context_id", "method_context_id", "treatment_context_id", "entity_context_id", "plot_context_id")))
```

This function adds columns to the traits table for all context properties. You may want to instead include fewer contexts.

```{r, eval = TRUE}
austraits$contexts %>%
  dplyr::distinct(context_property, category)
```

Select all austraits$traits columns (`r ncol(austraits$traits)` currently) together with the context properties you want to keep.

```{r, eval = TRUE}
traits_with_contexts$traits %>%
  dplyr::select(1:ncol(austraits$traits),  c("sampling season", "plant sex", "leaf surface", "leaf age", "fire intensity", "slope position", "fire season", "drought treatment", "temperature treatment"))
```

#### Joining methods

The methods table documents a selection of metadata recorded about the entire dataset and methods used for individual trait measurements. There is a single row of data per `dataset_id` x `trait_name` x `method_id` combination. `Method_id` is used to distinguish between instances where a single trait is measured twice using two separate protocols and is separate to `method_context_id` which documents specific components of a methods that are modified between measurements.

The `{austraits}` function offers a function to just add trait methods to the traits table:

```{r, eval = TRUE}
traits_with_methods <- 
  austraits %>% austraits::join_methods()

traits_with_methods$traits
```

To add all information within the methods table:

```{r, eval = TRUE}
traits_with_all_methods <- 
  austraits$traits %>% 
  dplyr::left_join(austraits$methods, 
            by = c("dataset_id", "trait_name", "method_id"))
```

As there are quite a few columns in the method table with lengthy text fields, it is worth first viewing the methods table and confirming you want information like `sampling_strategy` merged into the traits table.

Check the schema file embedded within AusTraits to see what information is documented in each column:

```{r, eval = TRUE}
austraits$schema$austraits$elements$methods$elements %>% 
  traits.build::util_list_to_df1()
```

Then just join the columns of interest:

```{r, eval = TRUE}
traits_with_all_methods <- 
  austraits$traits %>% 
  dplyr::left_join(austraits$methods %>% 
              dplyr::select("dataset_id", "trait_name", "methods", "method_id", "description",  "source_primary_citation", "data_collectors"),
            by = c("dataset_id", "trait_name", "method_id"))
```

#### Joining taxa

The taxon table documents a collection of names and identifiers for each taxon. Within AusTraits `names` submitted as identifiers within a dataset might be resolved to species, an infraspecific taxon, or sometimes just to genus- or family-level resolution; this information is recorded as the `taxon_rank`. The `taxon_rank` determines which information is filled in in the taxon table.

The `{austraits}` function makes it possible to quickly merge in family, genus, taxon_rank and establishment_means:

```{r, eval = TRUE}
austraits_with_taxa <-
  austraits %>% austraits::join_taxonomy()

austraits_with_taxa$traits
```

To add all columns from austraits\$taxa:

```{r, eval = TRUE, message = FALSE}
austraits_with_taxa <-
  austraits$traits %>%
  dplyr::left_join(austraits$taxa)
```

## Summarising data: trait means, modes, etc.

If you've sourced the file `extra_functions.R`, there are a few functions that allow you to summarise trait values.

### Categorical traits

For instance, `categorical_summary` indicates how many times a specific trait value is reported for a given taxa (across all datasets):

```{r, eval = TRUE, message = FALSE}
cat_summary <- categorical_summary(austraits, "resprouting_capacity")

cat_summary
```

Alternatively, create a wider matrix with possible trait values as columns:

```{r, eval = TRUE, message = FALSE}
categorical_summary_wider <- 
  categorical_summary_by_value(austraits, "resprouting_capacity") %>%
    tidyr::pivot_wider(names_from = value_tmp, values_from = replicates)

categorical_summary_wider
```

### Numeric traits

We're hesitant to write functions to summarise numeric traits, as this quickly requires statistical assumptions.

The datasets that comprise AusTraits were collected by different people, with different number of replicates, different entity types are reported - one dataset might include 20 measurements on individuals for a trait and another dataset might have submitted a single population-level mean derived from 5 measurements.

How do you take the mean of these trait values?

Do you want to include both data from experiments and plants growing under natural conditions? This information is recorded in the `basis_of_record` column.

The function `austraits::summarise_trait_means()` outputs `location` x `taxon_name` x `dataset_id` means, but is not (*currently*) appropriately updating/removing columns such as `observation_id`, `individual_id`, and `replicates`.

An alternative function we're developing is:

```{r, eval = TRUE, message = FALSE}
weighted <- austraits_weighted_means(austraits, c("leaf_mass_per_area", "leaf_length"))

weighted
```

This function first groups values at the site level, then at the taxon level. For trait data sourced from floras, where trait values are documented as a minimum and maximum value, it simply takes the mean of these as an additional mean.

## Plotting data {#plotting_functions}

### Plotting trait distributions

Another way to summarise AusTraits data by trait and determine if AusTraits offers sufficient data coverage for a trait of choice, is to plot the distribution of trait values in AusTraits.

As seen in [`A first look at data`](#exploring), the function `austraits::plot_trait_distribution_beeswarm()` plots trait data by dataset_id:

```{r, eval = TRUE}
austraits$traits %>% 
  dplyr::filter(trait_name == "leaf_N_per_dry_mass") %>%
  dplyr::distinct(taxon_name) %>% nrow()

austraits::plot_trait_distribution_beeswarm(austraits, "leaf_N_per_dry_mass", y_axis_category = "dataset_id")
```

### Plotting data distribution by location

To plot locations, you need to begin by merging on the latitude & longitude data from austraits\$locations.

The `plot_locations` function plots the selected data, separating data into a series of plots based on the variable name selected. You can separate data based on the values of **any** column within the traits table - including `basis_of_record`, `life_stage`, `value_type` - or higher taxon categories (`genus`, `family`).

For instance, `austraits::plot_locations("trait_name")` will output a separate plot for each `trait_name` within the selected data.

A warning: `austraits::plot_locations()` WILL BE VERY SLOW if you request more than \~20 plots. For instance, do not attempt to generate plots for all traits simultaneously. Always first use extract/filter to just select a narrow range of traits, datasets, or taxa.

#### Plot locations by trait

```{r, eval = TRUE, message = FALSE, warning = FALSE}

data <-
  austraits %>% 
     austraits::extract_trait(trait_names = c("leaf_mass_per_area")) %>%
     austraits::join_locations()

data$traits %>%
  dplyr::filter(!is.na(`latitude (deg)`)) %>%        # reduce the size of the dataframe by only retaining values with geographic coordinates
  austraits::plot_locations("trait_name")

# or

data <-
  austraits %>%
     austraits::extract_trait(trait_names = c("leaf_mass_per_area", "plant_height")) %>%
     austraits::join_locations()

data$traits %>% 
  dplyr::filter(!is.na(`latitude (deg)`)) %>%
  austraits::plot_locations("trait_name")
```

#### Plot locations by study

```{r, eval = TRUE, message = FALSE, warning = FALSE}
data <-
  austraits %>%
     austraits::extract_dataset("Westoby_2014") %>%
     austraits::join_locations()

data$traits %>% 
  dplyr::filter(!is.na(`latitude (deg)`)) %>%
  austraits::plot_locations("dataset_id")

data <-
  austraits %>%
     austraits::extract_dataset("Schulze_2014") %>%
     austraits::join_locations()

data$traits %>% 
  dplyr::filter(!is.na(`latitude (deg)`)) %>%
  austraits::plot_locations("dataset_id")
```

#### Plot locations by taxon

`plot_locations` lets you plot

```{r, eval = TRUE, message = FALSE, warning = FALSE}
data <-
  austraits %>%
  austraits::extract_taxa(taxon_name = "Acacia aneura") %>%
  austraits::join_locations()

data$traits <- data$traits %>% 
  dplyr::filter(!is.na(`latitude (deg)`)) 

austraits::plot_locations(data, "taxon_name")     # 1 taxon, so 1 plot

austraits::plot_locations(data, "dataset_id")     # 1 plot for each dataset_id
```

### More complex workflows - some examples

#### An example looking at trait-climate gradients

A simple workflow allows one to look at [trait values across a climate gradient](traits_and_climate_example.html)

#### An example incorporating ALA distribution data

A recent tutorial posted by ALA shows how one can combine AusTraits trait data and ALA spatial occurrence data:

https://labs.ala.org.au/posts/2023-08-28_alternatives-to-box-plots/post.html

We've adopted it [here](spatial_data_example.html).

## A complexity: pivoting datasets

The AusTraits tables are all in `long` format with an individual row for each trait measurement. This is the most compact way to store data and offers the flexibility of documenting diverse metadata for each trait measurement.

However, for many research uses, it may be more useful to view data in a `wide` format, with the multiple traits that comprise a single observation displayed as consecutive columns.

The `{austraits}` function `trait_pivot_wider` allows AusTraits datasets to be pivoted from `long` to `wide` format.

It is recommended to only use this function on individual datasets - or perhaps a small selection of datasets - as each dataset includes a different collection of traits and pivoting wider otherwise creates a very "holey" dataset.

```{r, eval = TRUE}
Farrell_2017_values <-
  austraits %>%
    austraits::extract_dataset("Farrell_2017")

Farrell_2017_pivoted <- 
  Farrell_2017_values$traits %>%
    austraits::trait_pivot_wider()

Farrell_2017_pivoted
```

This example pivots "nicely" as all observations have `entity_type = individual`.

Compare this first example to the dataset `Edwards_2000` which includes individual-level, population-level, and species-level observations:

```{r, eval = TRUE}
Edwards_2000_values <-
  austraits %>%
    austraits::extract_dataset("Edwards_2000")

Edwards_2000_pivoted <- 
  Edwards_2000_values$traits %>%
    austraits::trait_pivot_wider()

Edwards_2000_pivoted
```

The values at the individual, population and species level do not collapse together, because traits measured on different `entity_types` have separate `observation_id`'s.

One of the core identifiers assigned to data points is the `observation_id`. An observation is a collection of measurements made on a specific entity at a single point in time.

Observation_id's are therefore unique combinations of:

-   dataset_id
-   source_id
-   entity_type
-   taxon_name
-   population_id (location_id, plot_context_id, treatment_context_id)
-   individual_id
-   basis_of_record
-   entity_context_id
-   life_stage
-   temporal_context_id
-   collection_date
-   original_name

If a single dataset includes traits that are attributed to different entity types, they are assigned separate `observation_id`'s. For instance, many datasets are comprised of individual-level physiological trait data and a column `growth_form`, documenting the growth form (i.e. tree, shrub, herb, etc.) of each *species*.

We're developing a function that collapses the pivoted data into a more condensed table, but this loses some of the metadata:

```{r, eval = TRUE, message = FALSE, warning = FALSE}
Edwards_2000_pivoted_merged <-
  merge_entity_types("Edwards_2000")
```

-   This function will duplicate any "higher-entity" trait values (e.g. A single species-level value is filled in for all individuals or populations)

-   Metadata fields like `entity_type`, `value_type` are only retained if it is identical for all measurements

```{r, eval = TRUE, message = FALSE, warning = FALSE}
Westoby_2014_pivoted_merged <-
  merge_entity_types("Westoby_2014")
```

## Intepreting trait names, taxon names

### Trait dictionary

The AusTraits pipeline requires a trait dictionary that documents 4 pieces of information about each trait:

-   trait name 
-   trait type (categorical vs numeric) 
-   allowable trait values (for categorical traits) 
-   allowable trait range and units 

The trait dictionary embedded within AusTraits also has:

-   trait labels 
-   trait definitions 
-   definitions for all categorical trait values 

Together these clarify each "trait concept", which we define as: "a circumscribed set of trait measurements". Much like a taxon concept delimits a collection of organisms, a trait concept delimits a collection of trait values pertaining to a distinct characteristic of a specific part of an organism (cell, tissue, organ, or whole organism).

The [AusTraits Plant Dictionary (APD)](http:///w3id.org/APD) offers detailed descriptions for all trait concepts included in AusTraits. With the APD, each trait is given a unique, resolvable identifier, allowing trait definitions to be reused and shared.

The trait dictionary also includes: 

-   keywords 
-   plant structure measured 
-   characteristic measured 
-   references 
-   links to the same (or similar) trait concepts in other databases and dictionaries 

### Understanding taxon names

AusTraits uses the taxon names in the Australian Plant Census (APC) and the Australian Plant Names Index (APNI).

The R package [`{APCalign}`](https://github.com/traitecoevo/APCalign) is used to align and update taxon names submitted to AusTraits with those in the APC/APNI.

APC align can also be installed directly from CRAN

```{r, eval = TRUE}
#install.packages("APCalign")

library(APCalign)     # Australian plant taxon alignment function, available on CRAN 
```

There are two key components to the workflow: 

1.  aligning names 

-   syntax is standardised, including for phrase names 

-   most spelling mistakes are corrected 

-   names that indicate the plant can only be identified to genus are reformatted to `genus sp. [available notes; dataset_id]` 

    1.  they are linked to an APC-accepted genus but not to an APC-accepted binomial. 

    2.  they include the dataset_id so people don't mistakenly group all `Eucalyptus sp.` as a single "species" 

2.  updating names 

-   all aligned names that are in the APC, but that have a `taxonomic status` other than `accepted` are updated to their currently accepted name. 

Examples: 

Identical `genus sp.` inputs from disparate datasets are given unique "names": 

```{r, eval = TRUE}
austraits$traits %>%
  dplyr::filter(stringr::str_detect(original_name, "Eucalyptus sp\\.$")) %>%
  dplyr::distinct(dataset_id, taxon_name, original_name) %>%
  dplyr::filter(original_name != taxon_name) 
```

Outdated names are updated: 

```{r, eval = TRUE}
austraits$traits %>%
  dplyr::filter(stringr::str_detect(original_name, "Dryandra")) %>%
  dplyr::distinct(taxon_name, original_name) %>%
  dplyr::filter(original_name != taxon_name) %>% dplyr::slice(1:15)
```

Phrase name syntax across datasets is aligned:

```{r, eval = TRUE}
austraits$traits %>%
  dplyr::filter(stringr::str_detect(taxon_name, "Argyrodendron sp. Whyanbeel")) %>%
  dplyr::distinct(taxon_name, original_name)
```
